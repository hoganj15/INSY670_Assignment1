,0
1,"XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,
             colsample_bynode=1, colsample_bytree=0.521401988248436,
             gamma=8.140681930431104, importance_type='gain', learning_rate=0.1,
             max_delta_step=0, max_depth=8, min_child_weight=10.0, missing=None,
             n_estimators=100, n_jobs=1, nthread=None, objective='reg:linear',
             random_state=0, reg_alpha=40.0, reg_lambda=0.986429425556094,
             scale_pos_weight=1, seed=None, silent=None, subsample=1,
             verbosity=0)"
2,"XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,
             colsample_bynode=1, colsample_bytree=0.7943955402027962,
             gamma=1.9993814998796648, importance_type='gain',
             learning_rate=0.1, max_delta_step=0, max_depth=12,
             min_child_weight=8.0, missing=None, n_estimators=100, n_jobs=1,
             nthread=None, objective='reg:linear', random_state=0,
             reg_alpha=40.0, reg_lambda=0.4799460697257041, scale_pos_weight=1,
             seed=None, silent=None, subsample=1, verbosity=0)"
3,"XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,
             colsample_bynode=1, colsample_bytree=0.7766945767631745,
             gamma=6.058801316021615, importance_type='gain', learning_rate=0.1,
             max_delta_step=0, max_depth=4, min_child_weight=10.0, missing=None,
             n_estimators=100, n_jobs=1, nthread=None, objective='reg:linear',
             random_state=0, reg_alpha=40.0, reg_lambda=0.849472103688165,
             scale_pos_weight=1, seed=None, silent=None, subsample=1,
             verbosity=0)"
4,"RidgeCV(alphas=array([1.44916519e+00, 1.79706817e-01, 2.34266866e+00, 6.85002213e-01,
       2.27774308e+00, 1.31751100e-01, 1.70933483e+00, 8.58833404e-01,
       8.94183810e-01, 2.01803909e+00, 7.27032198e-01, 2.23284362e+00,
       3.47238302e-01, 5.61748157e-01, 1.25438320e+00, 6.49203593e-01,
       2.18990074e+00, 2.34678546e-01, 1.24790581e+00, 2.21214095e+00,
       2.44961041e-02, 1.23343994e+0...
       1.02830046e+00, 1.29791693e+00, 2.02025332e+00, 1.50395643e+00,
       1.02617116e+00, 2.43243027e+00, 1.69966963e+00, 2.03326827e+00,
       8.75871574e-01, 5.09709636e-01, 1.52581846e+00, 9.07354038e-01,
       7.51054377e-01, 2.10759277e+00, 1.38339348e+00, 2.13197379e+00,
       5.62297777e-01, 1.11178379e+00, 1.23629702e+00, 2.73237829e-01]),
        cv=None, fit_intercept=True, gcv_mode=None, normalize=False,
        scoring='r2', store_cv_values=False)"
5,"KNeighborsRegressor(algorithm='kd_tree', leaf_size=55, metric='minkowski',
                    metric_params=None, n_jobs=None, n_neighbors=6, p=2,
                    weights='distance')"
6,"KNeighborsRegressor(algorithm='ball_tree', leaf_size=20, metric='minkowski',
                    metric_params=None, n_jobs=None, n_neighbors=8, p=2,
                    weights='uniform')"
7,"RidgeCV(alphas=array([0.61410885, 1.63705592, 0.23596519, 2.42257465, 0.91937943,
       2.27800848, 0.18003764, 0.63610113, 2.04387155, 0.5577872 ,
       2.11483322, 2.11141975, 1.61668475, 0.47767033, 1.17418025,
       1.85122326, 0.42974819, 2.27299689, 0.03631002, 0.91826061,
       1.35555558, 0.88795673, 1.25849334, 1.45635742, 2.09088853,
       0.3557599 , 1.63437707, 1.82615379, 0.89833535, 1.02778846,...
       0.42869541, 2.11033568, 1.07020625, 0.40952916, 0.6668223 ,
       2.42398267, 2.14021254, 0.08180365, 0.56423481, 1.48950336,
       2.44064882, 1.97932188, 2.37770025, 0.2037196 , 0.26151455,
       1.64959691, 0.97543847, 0.64428549, 0.13510262, 2.11931031,
       0.76870293, 1.79910521, 1.55974829, 0.81007264, 2.46800143]),
        cv=None, fit_intercept=True, gcv_mode=None, normalize=False,
        scoring='r2', store_cv_values=False)"
8,"KNeighborsRegressor(algorithm='kd_tree', leaf_size=15, metric='minkowski',
                    metric_params=None, n_jobs=None, n_neighbors=10, p=2,
                    weights='uniform')"
9,"XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,
             colsample_bynode=1, colsample_bytree=0.9265701434864018,
             gamma=8.693538492007484, importance_type='gain', learning_rate=0.1,
             max_delta_step=0, max_depth=18, min_child_weight=0.0, missing=None,
             n_estimators=100, n_jobs=1, nthread=None, objective='reg:linear',
             random_state=0, reg_alpha=131.0, reg_lambda=0.21502011323405545,
             scale_pos_weight=1, seed=None, silent=None, subsample=1,
             verbosity=0)"
10,"RidgeCV(alphas=array([1.71074824, 1.08101586, 0.75653432, 1.11761894, 1.32864276,
       1.69731193, 0.49575532, 1.17775963, 1.42968317, 1.55577334,
       1.73277693, 0.59617312, 0.72696614, 1.6292966 , 1.97217101,
       1.22106945, 1.79171464, 1.60442435, 2.18188817, 0.10403851,
       1.81058247, 1.74784109, 2.04208091, 0.0749831 , 2.29068295,
       0.08641157, 0.00251517, 2.37015728, 0.94480775, 2.47430634,...
       1.30788491, 0.04568146, 1.15537749, 1.73974043, 2.2471729 ,
       1.07309185, 2.29632502, 1.61616544, 1.66236519, 0.52369023,
       1.65751133, 0.32739935, 0.69914869, 0.67812594, 1.55162576,
       2.06429846, 1.25503142, 1.52159943, 0.03914414, 1.87417522,
       1.44599477, 0.18623817, 0.63993656, 0.875434  , 2.00799614]),
        cv=None, fit_intercept=True, gcv_mode=None, normalize=False,
        scoring='r2', store_cv_values=False)"
11,"RidgeCV(alphas=array([1.58073232, 2.47239779, 2.07784906, 1.57998273, 1.91029263,
       1.46012031, 1.90311997, 0.05758288, 1.16316022, 0.81843511,
       0.8690513 , 0.9525513 , 1.22891413, 0.22145608, 1.09723998,
       1.157423  , 0.62682531, 0.21074094, 0.85745704, 1.95387202,
       0.14758318, 0.11254052, 1.71437507, 0.63555493, 1.37558381,
       2.22913867, 2.0432601 , 0.23862249, 2.42215901, 1.91042531,
       2.1...
       2.02616336, 1.76710758, 0.58385538, 0.19961244, 2.36530425,
       2.33867065, 0.91445056, 0.09179091, 2.35549177, 2.0725329 ,
       1.00681802, 2.33173   , 1.33919762, 1.40193545, 1.78464246,
       0.84521024, 1.76068834, 1.29190448, 1.73079429, 0.1582654 ,
       1.11019991, 1.72004652, 0.83652937, 2.46262731, 1.25748566]),
        cv=None, fit_intercept=True, gcv_mode=None, normalize=False,
        scoring='r2', store_cv_values=False)"
12,"XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,
             colsample_bynode=1, colsample_bytree=0.5458262537829599,
             gamma=5.863729625309772, importance_type='gain', learning_rate=0.1,
             max_delta_step=0, max_depth=13, min_child_weight=5.0, missing=None,
             n_estimators=100, n_jobs=1, nthread=None, objective='reg:linear',
             random_state=0, reg_alpha=176.0, reg_lambda=0.6138871931716032,
             scale_pos_weight=1, seed=None, silent=None, subsample=1,
             verbosity=0)"
13,"RidgeCV(alphas=array([1.40520153, 2.27250597, 0.78357352, 1.57128186, 1.67903133,
       1.36204195, 1.17525684, 1.70420325, 1.50285924, 0.32532046,
       0.56670373, 0.41417703, 0.96573189, 1.29594015, 1.02804315,
       0.36465952, 2.00984006, 0.86171456, 2.36575094, 2.06193922,
       1.13649743, 0.27746648, 1.61871412, 0.20265619, 1.85945177,
       0.74625052, 0.31433225, 2.27098803, 1.57518635, 1.8749036...
       0.57280166, 2.12638571, 1.63592019, 2.15706112, 0.77545876,
       0.57919907, 0.31242366, 2.45913878, 1.21119168, 0.55519475,
       2.09509777, 0.50312933, 2.11609786, 1.6040425 , 1.59961764,
       2.05085823, 0.50138005, 0.83327959, 0.60725237, 0.37627312,
       1.07635608, 0.21082543, 0.55759905, 1.31621286, 1.84492474]),
        cv=None, fit_intercept=True, gcv_mode=None, normalize=False,
        scoring='r2', store_cv_values=False)"
14,"KNeighborsRegressor(algorithm='auto', leaf_size=65, metric='minkowski',
                    metric_params=None, n_jobs=None, n_neighbors=10, p=2,
                    weights='uniform')"
15,"XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,
             colsample_bynode=1, colsample_bytree=0.7956210342134763,
             gamma=1.7850725341553768, importance_type='gain',
             learning_rate=0.1, max_delta_step=0, max_depth=4,
             min_child_weight=4.0, missing=None, n_estimators=100, n_jobs=1,
             nthread=None, objective='reg:linear', random_state=0,
             reg_alpha=150.0, reg_lambda=0.041016107048907804,
             scale_pos_weight=1, seed=None, silent=None, subsample=1,
             verbosity=0)"
16,"KNeighborsRegressor(algorithm='brute', leaf_size=35, metric='minkowski',
                    metric_params=None, n_jobs=None, n_neighbors=2, p=2,
                    weights='distance')"
17,"XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,
             colsample_bynode=1, colsample_bytree=0.8048303470324526,
             gamma=5.998206175936351, importance_type='gain', learning_rate=0.1,
             max_delta_step=0, max_depth=4, min_child_weight=4.0, missing=None,
             n_estimators=100, n_jobs=1, nthread=None, objective='reg:linear',
             random_state=0, reg_alpha=42.0, reg_lambda=0.1588879757564332,
             scale_pos_weight=1, seed=None, silent=None, subsample=1,
             verbosity=0)"
18,"XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,
             colsample_bynode=1, colsample_bytree=0.5209012499466414,
             gamma=6.24975012220552, importance_type='gain', learning_rate=0.1,
             max_delta_step=0, max_depth=13, min_child_weight=10.0,
             missing=None, n_estimators=100, n_jobs=1, nthread=None,
             objective='reg:linear', random_state=0, reg_alpha=42.0,
             reg_lambda=0.9694839889784048, scale_pos_weight=1, seed=None,
             silent=None, subsample=1, verbosity=0)"
19,"XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,
             colsample_bynode=1, colsample_bytree=0.8267615059883153,
             gamma=4.3471782964324035, importance_type='gain',
             learning_rate=0.1, max_delta_step=0, max_depth=9,
             min_child_weight=3.0, missing=None, n_estimators=100, n_jobs=1,
             nthread=None, objective='reg:linear', random_state=0,
             reg_alpha=46.0, reg_lambda=0.8716118684116549, scale_pos_weight=1,
             seed=None, silent=None, subsample=1, verbosity=0)"
20,"XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,
             colsample_bynode=1, colsample_bytree=0.5298133068082792,
             gamma=3.3747414034254994, importance_type='gain',
             learning_rate=0.1, max_delta_step=0, max_depth=18,
             min_child_weight=10.0, missing=None, n_estimators=100, n_jobs=1,
             nthread=None, objective='reg:linear', random_state=0,
             reg_alpha=54.0, reg_lambda=0.7338529523387434, scale_pos_weight=1,
             seed=None, silent=None, subsample=1, verbosity=0)"
21,"XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,
             colsample_bynode=1, colsample_bytree=0.5257298993418515,
             gamma=1.9043814377879138, importance_type='gain',
             learning_rate=0.1, max_delta_step=0, max_depth=8,
             min_child_weight=3.0, missing=None, n_estimators=100, n_jobs=1,
             nthread=None, objective='reg:linear', random_state=0,
             reg_alpha=40.0, reg_lambda=0.829261191181739, scale_pos_weight=1,
             seed=None, silent=None, subsample=1, verbosity=0)"
22,"RidgeCV(alphas=array([1.50255469, 0.18970796, 1.35890104, 1.80255298, 2.23954092,
       0.63529995, 1.71832013, 0.34644074, 1.06884345, 0.22294878,
       1.4143639 , 0.00967623, 1.62848535, 1.99306688, 1.48626063,
       0.74296625, 1.82990596, 1.18328602, 0.66811051, 0.15828847,
       0.94953373, 0.93780639, 0.46128798, 1.90292696, 1.74857383,
       1.98617712, 1.44818116, 1.82253597, 0.95162569, 1.53221203...
       1.13794291, 0.49429654, 1.87005909, 1.82685543, 2.35790262,
       0.97339388, 0.82634513, 2.03145952, 1.2200644 , 1.5594418 ,
       1.10896692, 2.37490656, 0.45086752, 1.08835372, 2.17652107,
       0.58433077, 0.21312235, 1.8332055 , 1.58534882, 0.34080761,
       0.53128967, 1.36947824, 2.04900334, 2.03038686, 2.35223355]),
        cv=None, fit_intercept=True, gcv_mode=None, normalize=False,
        scoring='r2', store_cv_values=False)"
23,"XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,
             colsample_bynode=1, colsample_bytree=0.9737734304411922,
             gamma=3.752594980479392, importance_type='gain', learning_rate=0.1,
             max_delta_step=0, max_depth=16, min_child_weight=9.0, missing=None,
             n_estimators=100, n_jobs=1, nthread=None, objective='reg:linear',
             random_state=0, reg_alpha=53.0, reg_lambda=0.2997078504713642,
             scale_pos_weight=1, seed=None, silent=None, subsample=1,
             verbosity=0)"
24,"XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,
             colsample_bynode=1, colsample_bytree=0.5602900088456974,
             gamma=2.404473615214599, importance_type='gain', learning_rate=0.1,
             max_delta_step=0, max_depth=17, min_child_weight=10.0,
             missing=None, n_estimators=100, n_jobs=1, nthread=None,
             objective='reg:linear', random_state=0, reg_alpha=119.0,
             reg_lambda=0.6005633761164385, scale_pos_weight=1, seed=None,
             silent=None, subsample=1, verbosity=0)"
25,"RidgeCV(alphas=array([1.9880014 , 1.00648981, 1.12686729, 0.99800038, 1.61006321,
       2.33231324, 0.58219222, 1.31647099, 1.10752456, 0.32410605,
       1.86307359, 0.30692328, 2.06617496, 0.79595932, 0.99312772,
       0.97218562, 1.21474208, 1.53961112, 0.39661152, 2.23800186,
       1.09231053, 0.39891666, 1.72563117, 1.90943674, 2.38739138,
       1.01426301, 0.18905364, 0.09151509, 1.49458704, 1.55910514...
       1.12996404, 0.47278859, 1.71791964, 2.36717813, 1.45260493,
       1.56695722, 0.94216049, 0.70110351, 0.99748737, 1.98637048,
       0.34239689, 1.88354549, 2.06155231, 1.55772683, 1.40390816,
       1.10357462, 1.39993743, 0.47175283, 1.58171931, 0.16637516,
       2.13732161, 1.71845544, 2.20157528, 0.69314731, 2.27749026]),
        cv=None, fit_intercept=True, gcv_mode=None, normalize=False,
        scoring='r2', store_cv_values=False)"
26,"KNeighborsRegressor(algorithm='brute', leaf_size=25, metric='minkowski',
                    metric_params=None, n_jobs=None, n_neighbors=10, p=2,
                    weights='uniform')"
27,"XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,
             colsample_bynode=1, colsample_bytree=0.5995890984875419,
             gamma=5.467675283583032, importance_type='gain', learning_rate=0.1,
             max_delta_step=0, max_depth=9, min_child_weight=3.0, missing=None,
             n_estimators=100, n_jobs=1, nthread=None, objective='reg:linear',
             random_state=0, reg_alpha=40.0, reg_lambda=0.5765720812985891,
             scale_pos_weight=1, seed=None, silent=None, subsample=1,
             verbosity=0)"
28,"KNeighborsRegressor(algorithm='brute', leaf_size=40, metric='minkowski',
                    metric_params=None, n_jobs=None, n_neighbors=5, p=2,
                    weights='distance')"
29,"KNeighborsRegressor(algorithm='kd_tree', leaf_size=75, metric='minkowski',
                    metric_params=None, n_jobs=None, n_neighbors=10, p=2,
                    weights='uniform')"
30,"XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,
             colsample_bynode=1, colsample_bytree=0.972976791634217,
             gamma=3.145416434322981, importance_type='gain', learning_rate=0.1,
             max_delta_step=0, max_depth=11, min_child_weight=3.0, missing=None,
             n_estimators=100, n_jobs=1, nthread=None, objective='reg:linear',
             random_state=0, reg_alpha=112.0, reg_lambda=0.7106672514108692,
             scale_pos_weight=1, seed=None, silent=None, subsample=1,
             verbosity=0)"
31,"XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,
             colsample_bynode=1, colsample_bytree=0.8477950032284706,
             gamma=3.83510748801022, importance_type='gain', learning_rate=0.1,
             max_delta_step=0, max_depth=12, min_child_weight=2.0, missing=None,
             n_estimators=100, n_jobs=1, nthread=None, objective='reg:linear',
             random_state=0, reg_alpha=40.0, reg_lambda=0.27629691422588376,
             scale_pos_weight=1, seed=None, silent=None, subsample=1,
             verbosity=0)"
32,"RidgeCV(alphas=array([0.92228646, 1.00043286, 1.30425587, 2.25677854, 1.3830768 ,
       0.42318615, 0.16498268, 0.56422102, 2.25159805, 1.79738593,
       1.82255567, 1.03796419, 2.40334625, 1.52925282, 2.11800064,
       0.66923325, 2.41001961, 1.60238804, 1.72453754, 1.12484297,
       0.3433696 , 1.61500697, 0.26707198, 1.05542181, 1.84034711,
       0.29656403, 0.25647082, 0.85624136, 2.30887723, 0.91025168,...
       1.6485116 , 2.06895095, 2.28853495, 1.16260663, 0.68286514,
       1.78848421, 0.07407955, 0.36203012, 1.14665408, 0.53715291,
       0.75560033, 2.13111552, 1.82990194, 0.05993529, 0.58218475,
       1.95238184, 1.0212817 , 1.64443664, 1.49264573, 0.09983288,
       2.22105005, 2.37904353, 2.33554061, 2.12202312, 2.38765137]),
        cv=None, fit_intercept=True, gcv_mode=None, normalize=False,
        scoring='r2', store_cv_values=False)"
33,"XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,
             colsample_bynode=1, colsample_bytree=0.7197429905862551,
             gamma=4.032496069377748, importance_type='gain', learning_rate=0.1,
             max_delta_step=0, max_depth=6, min_child_weight=10.0, missing=None,
             n_estimators=100, n_jobs=1, nthread=None, objective='reg:linear',
             random_state=0, reg_alpha=40.0, reg_lambda=0.25200901138711196,
             scale_pos_weight=1, seed=None, silent=None, subsample=1,
             verbosity=0)"
34,"XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,
             colsample_bynode=1, colsample_bytree=0.7070397021546342,
             gamma=4.501125020908212, importance_type='gain', learning_rate=0.1,
             max_delta_step=0, max_depth=12, min_child_weight=7.0, missing=None,
             n_estimators=100, n_jobs=1, nthread=None, objective='reg:linear',
             random_state=0, reg_alpha=79.0, reg_lambda=0.0964576888953468,
             scale_pos_weight=1, seed=None, silent=None, subsample=1,
             verbosity=0)"
35,"RidgeCV(alphas=array([0.29731114, 0.24043811, 0.68073542, 0.94994278, 2.08153987,
       1.47108588, 0.59054463, 1.06566055, 0.59828146, 2.47736893,
       1.87671049, 0.74824706, 1.92593035, 1.67918681, 1.65215478,
       2.25290241, 1.29072935, 0.8514026 , 0.59220767, 0.94339098,
       1.53360011, 0.56830092, 0.36507433, 0.47916528, 0.43307935,
       1.39306934, 2.31207398, 1.85604839, 0.07663214, 1.980468  ,
       0...
       0.05418198, 0.58667329, 1.55738458, 1.67315164, 1.04230475,
       1.82045846, 1.59554228, 1.4653198 , 1.03056222, 1.5202458 ,
       1.86653094, 1.63232582, 0.6840473 , 1.97978482, 2.00491193,
       2.23834175, 1.68405273, 1.90154355, 1.38756688, 0.53858228,
       0.37177676, 1.31767096, 0.29038194, 0.31243976, 2.24960985]),
        cv=None, fit_intercept=True, gcv_mode=None, normalize=False,
        scoring='r2', store_cv_values=False)"
36,"KNeighborsRegressor(algorithm='kd_tree', leaf_size=25, metric='minkowski',
                    metric_params=None, n_jobs=None, n_neighbors=9, p=2,
                    weights='distance')"
37,"RidgeCV(alphas=array([0.67448228, 0.77587634, 1.7806092 , 1.18079139, 0.44515736,
       0.34053015, 0.87565748, 0.9910793 , 1.21086782, 0.46528402,
       1.4365224 , 2.40975223, 1.17052652, 1.82898492, 1.75385041,
       2.35221939, 1.07909139, 1.6059468 , 0.1488681 , 2.19238057,
       0.96164892, 1.04384274, 1.58177196, 1.99398975, 0.37824691,
       0.36495588, 2.30549648, 0.92258655, 1.98489471, 1.76484618,
       0.2...
       1.01253395, 0.57518599, 0.82837155, 0.19304119, 0.17731699,
       0.86749207, 1.24088068, 1.22053914, 0.38912887, 1.58285544,
       1.2470995 , 1.5092507 , 1.9824703 , 1.99746846, 1.11663034,
       0.49323341, 1.98837977, 0.21032367, 1.60512627, 0.59396421,
       0.48937571, 0.77208913, 1.26484318, 1.82382886, 1.83970067]),
        cv=None, fit_intercept=True, gcv_mode=None, normalize=False,
        scoring='r2', store_cv_values=False)"
38,"XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,
             colsample_bynode=1, colsample_bytree=0.5522903592597868,
             gamma=1.4777851975826666, importance_type='gain',
             learning_rate=0.1, max_delta_step=0, max_depth=7,
             min_child_weight=5.0, missing=None, n_estimators=100, n_jobs=1,
             nthread=None, objective='reg:linear', random_state=0,
             reg_alpha=105.0, reg_lambda=0.2420722312492537, scale_pos_weight=1,
             seed=None, silent=None, subsample=1, verbosity=0)"
39,"RidgeCV(alphas=array([0.2346228 , 2.41850896, 0.63654054, 1.55373227, 2.43454593,
       1.98481025, 2.03929494, 1.88167061, 2.3021253 , 2.43340027,
       2.31225846, 0.29833835, 1.04633213, 1.1117364 , 2.20776736,
       1.148988  , 1.53671494, 1.15204476, 1.83703099, 2.15375229,
       0.96829081, 1.90794597, 1.149465  , 2.42622899, 1.80026006,
       1.24137938, 2.42956765, 1.60116829, 0.65251134, 1.28432603,
       2.169...
       1.63298681, 0.5648726 , 1.96637408, 1.22733809, 1.14084157,
       0.27980817, 0.31709207, 1.71421986, 0.81902253, 0.05611249,
       1.78482456, 0.789998  , 1.90360317, 0.81860937, 0.28694033,
       1.96087108, 0.77512052, 0.9838838 , 0.16157704, 1.97627449,
       0.66109013, 0.48405566, 1.49796957, 0.27848326, 1.02982395]),
        cv=None, fit_intercept=True, gcv_mode=None, normalize=False,
        scoring='r2', store_cv_values=False)"
40,"XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,
             colsample_bynode=1, colsample_bytree=0.5622088617778191,
             gamma=6.368546444036012, importance_type='gain', learning_rate=0.1,
             max_delta_step=0, max_depth=13, min_child_weight=1.0, missing=None,
             n_estimators=100, n_jobs=1, nthread=None, objective='reg:linear',
             random_state=0, reg_alpha=56.0, reg_lambda=0.9937800375055504,
             scale_pos_weight=1, seed=None, silent=None, subsample=1,
             verbosity=0)"
41,"XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,
             colsample_bynode=1, colsample_bytree=0.6472046918580833,
             gamma=4.447954600233521, importance_type='gain', learning_rate=0.1,
             max_delta_step=0, max_depth=9, min_child_weight=5.0, missing=None,
             n_estimators=100, n_jobs=1, nthread=None, objective='reg:linear',
             random_state=0, reg_alpha=105.0, reg_lambda=0.6313471100285447,
             scale_pos_weight=1, seed=None, silent=None, subsample=1,
             verbosity=0)"
42,"RidgeCV(alphas=array([0.75029607, 0.34618455, 1.04363262, 0.77683618, 1.03168984,
       1.43396722, 2.28873233, 2.07729859, 0.76156657, 0.79974556,
       1.96935213, 0.39205648, 1.34343116, 0.95574126, 2.44532902,
       0.94791149, 0.59470083, 0.31426719, 2.08696586, 1.70214622,
       2.03144488, 1.11948709, 1.12826505, 1.19830451, 0.448288  ,
       2.42486304, 0.69947565, 0.68626323, 1.68812227, 2.00753915,...
       2.40218531, 2.17719259, 0.21268224, 0.31407846, 1.40087192,
       1.65197261, 0.20343439, 0.10613417, 2.37741807, 1.10599549,
       1.20688221, 0.53553124, 0.39665537, 0.42496058, 1.61544598,
       0.89035099, 0.74428699, 0.94949295, 1.67048265, 1.11208123,
       1.73119528, 0.99149509, 0.34626498, 0.82723976, 1.95612892]),
        cv=None, fit_intercept=True, gcv_mode=None, normalize=False,
        scoring='r2', store_cv_values=False)"
43,"RidgeCV(alphas=array([1.41842312, 1.25789913, 1.91436168, 1.73360438, 2.4319437 ,
       0.72716464, 0.29016223, 1.06558103, 0.50083442, 1.04333304,
       0.31422101, 1.39241214, 0.03061211, 2.49981731, 0.40655161,
       0.49111914, 1.0315107 , 0.91634633, 0.25927435, 1.12017841,
       0.03978898, 1.84256245, 0.84397392, 0.27853501, 0.61281495,
       1.45452837, 0.52482381, 0.92723291, 0.75093314, 1.45391905,...
       0.18847731, 2.31144741, 1.63361199, 1.96069573, 0.76790898,
       0.52393928, 1.31614529, 0.05608501, 2.21728888, 1.43183645,
       0.58930211, 0.16527924, 0.00784566, 2.20675076, 1.8953153 ,
       1.62807971, 1.37291633, 2.35064628, 0.28327828, 1.6521941 ,
       0.13018542, 1.51366698, 1.47835945, 0.17924638, 0.01837548]),
        cv=None, fit_intercept=True, gcv_mode=None, normalize=False,
        scoring='r2', store_cv_values=False)"
44,"RidgeCV(alphas=array([1.02078429e+00, 7.56604318e-01, 7.75946893e-02, 1.29099357e+00,
       1.32199572e+00, 2.16176494e+00, 2.37893831e+00, 1.87524011e-01,
       9.59021691e-02, 3.21086451e-01, 1.69250565e-01, 1.72656330e+00,
       9.32650756e-01, 2.17119027e+00, 1.82160618e+00, 8.93551730e-01,
       1.74571271e+00, 9.34223377e-01, 6.63854298e-01, 4.47657806e-01,
       4.06589516e-01, 3.28814969e-0...
       7.72356031e-01, 7.99976189e-02, 1.79126853e+00, 2.27427982e+00,
       3.71836104e-01, 1.99389876e+00, 9.42290015e-01, 5.28182592e-01,
       1.64607313e+00, 1.38463358e-01, 5.85168383e-02, 2.05293681e+00,
       8.08647447e-01, 3.04148957e-01, 1.44649952e+00, 7.92286390e-01,
       2.14342447e+00, 1.75727891e+00, 2.36595868e+00, 5.48494237e-02]),
        cv=None, fit_intercept=True, gcv_mode=None, normalize=False,
        scoring='r2', store_cv_values=False)"